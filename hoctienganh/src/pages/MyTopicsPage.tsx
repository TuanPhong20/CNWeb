import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import TopicWordsModal from '../components/TopicWordsModal';
import { useAuth } from '../contexts/AuthContext';
import '../styles/MyTopicsPage.css';

interface Topic {
  id: number;
  title: string;
  description: string;
  userId: number;
  createdAt: string;
}

const MyTopicsPage: React.FC = () => {
  const [topics, setTopics] = useState<Topic[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [showTopicWordsModal, setShowTopicWordsModal] = useState(false);
  const [deletingTopicId, setDeletingTopicId] = useState<number | null>(null);
  const [deleteError, setDeleteError] = useState<string | null>(null);
  const [deleteSuccess, setDeleteSuccess] = useState(false);
  const { isAuthenticated, token, user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    if (!isAuthenticated) {
      navigate('/login', { state: { from: '/my-topics' } });
      return;
    }

    const fetchUserTopics = async () => {
      try {
        setLoading(true);
        
        // URL API cho ch·ªß ƒë·ªÅ c·ªßa ng∆∞·ªùi d√πng
        let apiUrl = 'http://localhost:3000/api/topics';
        
        // C√≥ hai c√°ch ƒë·ªÉ l·∫•y ch·ªß ƒë·ªÅ c·ªßa ng∆∞·ªùi d√πng:
        // 1. L·∫•y ch·ªß ƒë·ªÅ ƒë∆∞·ª£c t·∫°o b·ªüi ng∆∞·ªùi d√πng (userId)
        // 2. L·∫•y ch·ªß ƒë·ªÅ ƒë√£ l∆∞u b·ªüi ng∆∞·ªùi d√πng (saved topics)
        
        // S·ª≠ d·ª•ng API ƒë·ªÉ l·∫•y c√°c ch·ªß ƒë·ªÅ do ng∆∞·ªùi d√πng t·∫°o
        const response = await fetch(apiUrl, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªß ƒë·ªÅ');
        }
        
        const allTopics = await response.json();
        
        // L·ªçc c√°c ch·ªß ƒë·ªÅ ch·ªâ c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const userTopics = Array.isArray(allTopics) 
          ? allTopics.filter((topic: any) => {
              const topicUserId = topic.UserID || topic.userId;
              return topicUserId === user?.userId;
            }).map((topic: any) => ({
              id: topic.TopicID || topic.id,
              title: topic.Title || topic.title,
              description: topic.Description || topic.description,
              userId: topic.UserID || topic.userId,
              createdAt: topic.CreatedAt || topic.createdAt
            }))
          : [];
        
        // ƒê·∫∑t danh s√°ch topic
        setTopics(userTopics);
        setLoading(false);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'ƒê√£ x·∫£y ra l·ªói';
        setError(errorMessage);
        setLoading(false);
      }
    };
    
    fetchUserTopics();
  }, [isAuthenticated, token, user, navigate]);

  const handleCreateTopic = () => {
    navigate('/create-topic');
  };

  const handleTopicClick = (topic: Topic) => {
    setSelectedTopic(topic);
    setShowTopicWordsModal(true);
  };

  const handleViewTopicDetails = (topicId: number, e: React.MouseEvent) => {
    e.stopPropagation();
    navigate(`/listening-writing/${topicId}`);
  };

  const handleCloseModal = () => {
    setShowTopicWordsModal(false);
    setSelectedTopic(null);
  };

  const handleDeleteTopic = async (topicId: number, e: React.MouseEvent) => {
    e.stopPropagation(); // NgƒÉn ch·∫∑n s·ª± ki·ªán click lan ra ngo√†i (kh√¥ng m·ªü topic)
    
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch·ªß ƒë·ªÅ n√†y kh√¥ng? T·∫•t c·∫£ t·ª´ v·ª±ng trong ch·ªß ƒë·ªÅ n√†y c≈©ng s·∫Ω b·ªã x√≥a.')) {
      return;
    }
    
    try {
      setDeletingTopicId(topicId);
      setDeleteError(null);
      
      const response = await fetch(`http://localhost:3000/api/topics/${topicId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ x√≥a ch·ªß ƒë·ªÅ. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
      
      // X√≥a th√†nh c√¥ng, c·∫≠p nh·∫≠t l·∫°i danh s√°ch
      setTopics(prevTopics => prevTopics.filter(topic => topic.id !== topicId));
      setDeleteSuccess(true);
      
      // ·∫®n th√¥ng b√°o th√†nh c√¥ng sau 3 gi√¢y
      setTimeout(() => {
        setDeleteSuccess(false);
      }, 3000);
      
    } catch (err) {
      console.error('Error deleting topic:', err);
      const errorMessage = err instanceof Error ? err.message : 'ƒê√£ x·∫£y ra l·ªói khi x√≥a ch·ªß ƒë·ªÅ';
      setDeleteError(errorMessage);
    } finally {
      setDeletingTopicId(null);
    }
  };

  return (
    <div className="my-topics-page">
      <Header />
      <main className="my-topics-main">
        <div className="container">
          <h1 className="page-title">Danh s√°ch c√°c ch·ªß ƒë·ªÅ c·ªßa t√¥i</h1>
          <p className="page-description">
            Qu·∫£n l√Ω v√† luy·ªán t·∫≠p v·ªõi c√°c ch·ªß ƒë·ªÅ b·∫°n ƒë√£ t·∫°o
          </p>
          
          <div className="add-topic-container">
            <button className="add-topic-btn" onClick={handleCreateTopic}>
              <span className="add-icon">+</span> Th√™m ch·ªß ƒë·ªÅ m·ªõi
            </button>
          </div>

          {deleteSuccess && (
            <div className="success-message">
              <p>ƒê√£ x√≥a ch·ªß ƒë·ªÅ th√†nh c√¥ng!</p>
            </div>
          )}
          
          {deleteError && (
            <div className="error-message">
              <p>{deleteError}</p>
              <button onClick={() => setDeleteError(null)}>ƒê√≥ng</button>
            </div>
          )}
          
          {loading ? (
            <div className="loading-container">
              <div className="spinner"></div>
              <p>ƒêang t·∫£i danh s√°ch ch·ªß ƒë·ªÅ...</p>
            </div>
          ) : error ? (
            <div className="error-message">
              <p>{error}</p>
              <button onClick={() => window.location.reload()}>Th·ª≠ l·∫°i</button>
            </div>
          ) : topics.length > 0 ? (
            <div className="topics-grid">
              {topics.map(topic => (
                <div 
                  key={topic.id} 
                  className="topic-card"
                  onClick={() => handleTopicClick(topic)}
                >
                  <h2 className="topic-title">{topic.title}</h2>
                  <p className="topic-description">{topic.description}</p>
                  <div className="topic-actions">
                    <button 
                      className="add-word-btn-small" 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleTopicClick(topic);
                      }}
                    >
                      Qu·∫£n l√Ω t·ª´ v·ª±ng
                    </button>
                    <button 
                      className="delete-topic-btn"
                      onClick={(e) => handleDeleteTopic(topic.id, e)}
                      disabled={deletingTopicId === topic.id}
                    >
                      {deletingTopicId === topic.id ? (
                        <span className="spinner-small"></span>
                      ) : (
                        <span className="delete-icon">üóëÔ∏è</span>
                      )}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="no-topics-message">
              <p>B·∫°n ch∆∞a c√≥ ch·ªß ƒë·ªÅ n√†o. H√£y th√™m ch·ªß ƒë·ªÅ m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
            </div>
          )}
        </div>
      </main>
      
      {selectedTopic && (
        <TopicWordsModal 
          isOpen={showTopicWordsModal}
          onClose={handleCloseModal}
          topicId={selectedTopic.id}
          topicTitle={selectedTopic.title}
        />
      )}
      
      <Footer />
    </div>
  );
};

export default MyTopicsPage; 