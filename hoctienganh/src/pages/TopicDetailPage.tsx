import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import { useAuth } from '../contexts/AuthContext';
import '../styles/TopicDetailPage.css';

interface Topic {
  id: number;
  title: string;
  description: string;
  userId: number;
  createdAt: string;
}

interface Word {
  id: number;
  wordText: string;
  meaning: string;
  pronunciation: string;
  audioUrl?: string;
  example?: string;
}

interface Result {
  wordId: number;
  isCorrect: boolean;
}

const TopicDetailPage: React.FC = () => {
  const { topicId } = useParams<{topicId: string}>();
  const [topic, setTopic] = useState<Topic | null>(null);
  const [words, setWords] = useState<Word[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [userInput, setUserInput] = useState('');
  const [checkResult, setCheckResult] = useState<'correct' | 'incorrect' | null>(null);
  const [volume, setVolume] = useState(80);
  const [results, setResults] = useState<Result[]>([]);
  const [showSummary, setShowSummary] = useState(false);
  const { token } = useAuth();
  const navigate = useNavigate();
  const audioRef = useRef<HTMLAudioElement>(null);

  useEffect(() => {
    const fetchTopicDetails = async () => {
      try {
        setLoading(true);
        
        // Fetch topic details
        const topicResponse = await fetch(`http://localhost:3000/api/topics/${topicId}`);
        if (!topicResponse.ok) {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ch·ªß ƒë·ªÅ');
        }
        const topicData = await topicResponse.json();
        console.log('Topic data loaded:', topicData);
        console.log('Topic structure:', Object.keys(topicData));
        
        // T·∫°m th·ªùi b·ªè qua type check
        setTopic(topicData);
        
        // Fetch words associated with this topic
        const wordsResponse = await fetch(`http://localhost:3000/api/topic-words/topic/${topicId}/words`);
        if (wordsResponse.ok) {
          const wordsData = await wordsResponse.json();
          
          // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë√∫ng t√™n tr∆∞·ªùng
          const formattedWords = Array.isArray(wordsData) 
            ? wordsData.map((word: any) => ({
                id: word.WordID || word.id,
                wordText: word.English || word.wordText || word.englishText,
                meaning: word.Meaning || word.meaning || word.vietnameseText,
                pronunciation: word.Phonetic || word.pronunciation || '',
                audioUrl: word.AudioURL || word.audioUrl || '',
                example: word.Example || word.example || ''
              }))
            : [];
          
          setWords(formattedWords);
          console.log('Loaded words:', formattedWords);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err instanceof Error ? err.message : 'ƒê√£ x·∫£y ra l·ªói');
        setLoading(false);
      }
    };
    
    if (topicId) {
      fetchTopicDetails();
    }
  }, [topicId]);

  // Ph√°t audio t·ª± ƒë·ªông khi chuy·ªÉn sang t·ª´ m·ªõi
  useEffect(() => {
    if (words.length > 0 && !loading) {
      playAudio();
    }
  }, [currentWordIndex, words, loading]);

  const handleBack = () => {
    navigate('/my-topics');
  };

  const playAudio = () => {
    const currentWord = words[currentWordIndex];
    if (currentWord?.audioUrl && audioRef.current) {
      console.log('Playing audio:', currentWord.audioUrl);
      try {
        audioRef.current.src = currentWord.audioUrl;
        audioRef.current.volume = volume / 100;
        
        // ƒê·∫£m b·∫£o promise c·ªßa ph∆∞∆°ng th·ª©c play() ƒë∆∞·ª£c x·ª≠ l√Ω
        const playPromise = audioRef.current.play();
        
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log('Audio played successfully');
            })
            .catch(error => {
              console.error('Error playing audio:', error);
              // Trong tr∆∞·ªùng h·ª£p autoplay b·ªã ch·∫∑n, hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
              alert('Vui l√≤ng nh·∫•n n√∫t ph√°t ƒë·ªÉ nghe √¢m thanh');
            });
        }
      } catch (error) {
        console.error('Error setting up audio:', error);
      }
    } else {
      console.log('No audio URL found for current word or audio reference not available');
    }
  };

  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseInt(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume / 100;
    }
  };

  const handleNext = () => {
    if (currentWordIndex < words.length - 1) {
      setCurrentWordIndex(prev => prev + 1);
      setUserInput('');
      setCheckResult(null);
    }
  };

  const handlePrevious = () => {
    if (currentWordIndex > 0) {
      setCurrentWordIndex(prev => prev - 1);
      setUserInput('');
      setCheckResult(null);
    }
  };

  const checkAnswer = () => {
    const currentWord = words[currentWordIndex];
    const isCorrect = userInput.trim().toLowerCase() === currentWord.wordText.toLowerCase();
    
    // L∆∞u k·∫øt qu·∫£
    const newResult = {
      wordId: currentWord.id,
      isCorrect: isCorrect
    };
    
    // Ki·ªÉm tra xem k·∫øt qu·∫£ ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingResultIndex = results.findIndex(r => r.wordId === currentWord.id);
    
    if (existingResultIndex >= 0) {
      // C·∫≠p nh·∫≠t k·∫øt qu·∫£ n·∫øu ƒë√£ t·ªìn t·∫°i
      const updatedResults = [...results];
      updatedResults[existingResultIndex] = newResult;
      setResults(updatedResults);
    } else {
      // Th√™m k·∫øt qu·∫£ m·ªõi
      setResults([...results, newResult]);
    }
    
    if (isCorrect) {
      setCheckResult('correct');
    } else {
      setCheckResult('incorrect');
    }
  };

  const handleComplete = () => {
    setShowSummary(true);
  };

  const getCorrectCount = () => {
    return results.filter(r => r.isCorrect).length;
  };

  const handleRetry = () => {
    setCurrentWordIndex(0);
    setUserInput('');
    setCheckResult(null);
    setShowSummary(false);
    // C√≥ th·ªÉ reset k·∫øt qu·∫£ n·∫øu mu·ªën
    // setResults([]);
  };

  const getCurrentWord = () => {
    return words.length > 0 ? words[currentWordIndex] : null;
  };

  const getTopicTitle = () => {
    if (!topic) return 'ƒêang t·∫£i...';
    
    // √âp ki·ªÉu ƒë·ªÉ truy c·∫≠p c√°c thu·ªôc t√≠nh kh√¥ng ƒë∆∞·ª£c khai b√°o
    const anyTopic = topic as any;
    
    // Th·ª≠ c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a t√™n ch·ªß ƒë·ªÅ
    if (topic.title) return topic.title;
    if (anyTopic.Title) return anyTopic.Title;
    if (anyTopic.name) return anyTopic.name;
    if (anyTopic.Name) return anyTopic.Name;
    
    return 'Ch·ªß ƒë·ªÅ kh√¥ng x√°c ƒë·ªãnh';
  };

  return (
    <div className="topic-detail-page">
      <Header />
      <main className="topic-detail-main">
        <div className="container">
          {loading ? (
            <div className="loading-container">
              <div className="spinner"></div>
              <p>ƒêang t·∫£i th√¥ng tin ch·ªß ƒë·ªÅ...</p>
            </div>
          ) : error ? (
            <div className="error-message">
              <p>{error}</p>
              <button onClick={() => window.location.reload()}>Th·ª≠ l·∫°i</button>
            </div>
          ) : topic && words.length > 0 ? (
            <div className="listening-writing-container">
              {showSummary ? (
                <div className="summary-card">
                  <h2 className="summary-title">K·∫øt qu·∫£ luy·ªán t·∫≠p</h2>
                  <div className="topic-name">{getTopicTitle()}</div>
                  
                  <div className="score-display">
                    <div className="score-circle">
                      <span className="score-number">{getCorrectCount()}</span>
                      <span className="score-total">/{words.length}</span>
                    </div>
                    <div className="score-text">S·ªë t·ª´ v·ª±ng ƒë√∫ng</div>
                  </div>
                  
                  <div className="summary-message">
                    {getCorrectCount() === words.length ? (
                      <p className="perfect-score">Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c t·ª´ v·ª±ng.</p>
                    ) : getCorrectCount() >= words.length * 0.7 ? (
                      <p className="good-score">T·ªët l·∫Øm! B·∫°n ƒë√£ ho√†n th√†nh ph·∫ßn l·ªõn c√°c t·ª´ v·ª±ng.</p>
                    ) : (
                      <p className="average-score">H√£y ti·∫øp t·ª•c luy·ªán t·∫≠p ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng c·ªßa b·∫°n.</p>
                    )}
                  </div>
                  
                  <div className="summary-actions">
                    <button className="retry-btn" onClick={handleRetry}>Luy·ªán t·∫≠p l·∫°i</button>
                    <button className="back-btn" onClick={handleBack}>Quay l·∫°i ch·ªß ƒë·ªÅ</button>
                  </div>
                </div>
              ) : (
                <div className="listening-writing-practice">
                  <div className="listening-writing-card">
                    <div className="vocabulary-category">
                      <span className="category-name">
                        {getTopicTitle()}
                      </span>
                    </div>
                    
                    <div className="audio-section">
                      <div className="audio-controls">
                        <button className="play-btn" onClick={playAudio}>
                          <span className="audio-icon">üîä</span>
                        </button>
                        <input 
                          type="range" 
                          className="volume-slider" 
                          min="0" 
                          max="100" 
                          value={volume}
                          onChange={handleVolumeChange}
                        />
                        <button className="replay-btn" onClick={playAudio} title="Nghe l·∫°i">
                          <span>üîÑ</span>
                        </button>
                      </div>
                      <p className="instruction-text">Vi·∫øt l·∫°i t·ª´ v·ª´a nghe</p>
                    </div>
                    
                    <div className="input-section">
                      <input 
                        type="text" 
                        value={userInput}
                        onChange={(e) => setUserInput(e.target.value)}
                        placeholder="Nh·∫≠p t·ª´ b·∫°n v·ª´a nghe"
                        className={`answer-input ${
                          checkResult === 'correct' ? 'correct' : 
                          checkResult === 'incorrect' ? 'incorrect' : ''
                        }`}
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            checkAnswer();
                          }
                        }}
                      />
                      <button className="confirm-btn" onClick={checkAnswer}>
                        X√°c nh·∫≠n
                      </button>
                    </div>
                    
                    {checkResult === 'correct' && (
                      <div className="result-message correct">
                        <p>Ch√≠nh x√°c! T·ª´ n√†y l√†: {getCurrentWord()?.wordText}</p>
                        <p>Nghƒ©a: {getCurrentWord()?.meaning}</p>
                      </div>
                    )}
                    
                    {checkResult === 'incorrect' && (
                      <div className="result-message incorrect">
                        <p>Ch∆∞a ch√≠nh x√°c. H√£y nghe v√† th·ª≠ l·∫°i.</p>
                      </div>
                    )}
                  </div>
                  
                  <div className="navigation-controls">
                    <button 
                      className="nav-btn prev-btn" 
                      onClick={handlePrevious}
                      disabled={currentWordIndex === 0}
                    >
                      <i className="nav-icon">‚Üê</i>
                    </button>
                    <span className="progress-text">
                      {currentWordIndex + 1}/{words.length}
                    </span>
                    {currentWordIndex === words.length - 1 ? (
                      <button 
                        className="nav-btn complete-btn"
                        onClick={handleComplete}
                      >
                        <i className="nav-icon">‚úì</i>
                      </button>
                    ) : (
                      <button 
                        className="nav-btn next-btn"
                        onClick={handleNext}
                        disabled={currentWordIndex === words.length - 1}
                      >
                        <i className="nav-icon">‚Üí</i>
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="not-found">
              <h2>Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ</h2>
              <p>Ch·ªß ƒë·ªÅ n√†y ch∆∞a c√≥ t·ª´ v·ª±ng n√†o ho·∫∑c kh√¥ng t·ªìn t·∫°i.</p>
              <button onClick={handleBack}>Quay l·∫°i danh s√°ch ch·ªß ƒë·ªÅ</button>
            </div>
          )}
        </div>
      </main>
      <audio ref={audioRef} />
      <Footer />
    </div>
  );
};

export default TopicDetailPage; 